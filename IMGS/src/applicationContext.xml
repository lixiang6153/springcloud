<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- 配置扫描的注解类的包和其子包 -->
	<context:component-scan base-package="com.donwait"></context:component-scan>
	<!-- 使得AspectJ注解起作用 -->
	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>

	<!-- 配置数据库源 -->
	<!-- 导入资源文件 -->
	<context:property-placeholder location="classpath:db.properties" />
	<!-- 数据源bean c3p0连接池
	<bean id="dataSourceTarget" class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>

		<property name="initialPoolSize" value="${jdbc.initPoolSize}"></property>
		<property name="maxPoolSize" value="${jdbc.maxPoolSize}"></property>
		<property name="acquireIncrement" value="${jdbc.acquireIncrement}"></property>
		<property name="maxIdleTime" value="${jdbc.maxIdleTime}"></property>
		<property name="maxStatements" value="${jdbc.maxStatements}"></property>
		<property name="idleConnectionTestPeriod" value="${jdbc.idleConnectionTestPeriod}"></property>
	</bean>-->
	<!-- 切换为BoneCP连接池[最新名为hikariCP]
	<bean id="dataSourceTarget" class="com.jolbox.bonecp.BoneCPDataSource"  destroy-method="close"> --> 
        <!-- 数据库驱动 -->  
        <!--<property name="driverClass" value="${jdbc.driverClass}" /> --> 
        <!-- 相应驱动的jdbcUrl,你懂的 -->  
        <!--<property name="jdbcUrl" value="${jdbc.jdbcUrl}" /> --> 
        <!-- 数据库的用户名 -->  
        <!--<property name="username" value="${jdbc.user}" />-->  
        <!-- 数据库的密码 -->  
        <!--<property name="password" value="${jdbc.password}" />-->  
        <!-- 连接池中未使用的链接最大存活时间，单位是分，默认值：30，如果要永远存活设置为0 -->  
        <!--<property name="idleMaxAgeInMinutes" value="${jdbc.idleMaxAgeInMinutes}" />-->
        <!-- 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：60，如果要取消则设置为0 -->
		<!--<property name="idleConnectionTestPeriodInMinutes" value="${jdbc.idleConnectionTestPeriodInMinutes}"/> -->
		<!-- 在做keep-alive的时候的SQL语句 
		<property name="connectionTestStatement" value="select 1 from dual"/>-->
        <!-- 每个分区最大的连接数 -->  
        <!--<property name="maxConnectionsPerPartition" value="${jdbc.maxConnectionsPerPartition}" /> --> 
        <!-- 每个分区最小的连接数 -->  
        <!--<property name="minConnectionsPerPartition" value="${jdbc.minConnectionsPerPartition}" />  -->
        <!-- 分区数 ，默认值2，最小1，推荐3-4，视应用而定-->  
        <!--<property name="partitionCount" value="${jdbc.partitionCount}" />  -->
        <!-- 每次去拿数据库连接的时候一次性要拿几个,默认值：2 -->  
        <!--<property name="acquireIncrement" value="${jdbc.acquireIncrement}" /> --> 
        <!-- 缓存prepared statements的大小，默认值：0 -->  
        <!--<property name="statementsCacheSize" value="${jdbc.statementsCacheSize}" />  -->
        <!-- 每个分区释放链接助理进程的数量，默认值：3，除非你的一个数据库连接的时间内做了很多工作，不然过多的助理进程会影响你的性能 -->  
        <!--<property name="releaseHelperThreads" value="${jdbc.releaseHelperThreads}" />  -->
    <!--</bean>-->
    <!-- hikariCP高性能连接池 -->
    <bean id="dataSourceTarget" class="com.zaxxer.hikari.HikariDataSource" destroy-method="shutdown">
        <property name="driverClassName" value="${jdbc.driverClass}" />
        <property name="jdbcUrl" value="${jdbc.jdbcUrl}" />
        <property name="username" value="${jdbc.user}" />
        <property name="password" value="${jdbc.password}" />
        <!-- 连接只读数据库时配置为true， 保证安全 -->
        <property name="readOnly" value="${jdbc.readOnly}" />
        <!-- 等待连接池分配连接的最大时长（毫秒），超过这个时长还没可用的连接则发生SQLException， 缺省:30秒 -->
        <property name="connectionTimeout" value="${jdbc.connectionTimeout}" />
        <!-- 一个连接idle状态的最大时长（毫秒），超时则被释放（retired），缺省:10分钟 -->
        <property name="idleTimeout" value="${jdbc.idleMaxAgeInMinutes}" />
        <!-- 一个连接的生命时长（毫秒），超时而且没被使用则被释放（retired），缺省:30分钟，建议设置比数据库超时时长少30秒，参考MySQL wait_timeout参数（show variables like '%timeout%';） -->
        <property name="maxLifetime" value="${jdbc.maxLifetime}" />
        <!-- 连接池中允许的最大连接数。缺省值：10；推荐的公式：((core_count * 2) + effective_spindle_count) -->
        <property name="maximumPoolSize" value="${jdbc.maxPoolSize}" />
        <!--<property name="minimumIdle" value="${jdbc.minPoolSize}" />-->
    </bean>
	<!-- p6spy配置监控数据库 -->
	<bean id="dataSource" class="com.p6spy.engine.spy.P6DataSource">
		<constructor-arg ref="dataSourceTarget"></constructor-arg>
	</bean>
	
	<!-- 配置sessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
		<!-- 配置数据源 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 配置hibernate配置文件 -->
		<property name="configLocation" value="classpath:hibernate.cfg.xml"></property>
		<!-- 配置扫描的注解类包 -->
		<property name="packagesToScan">
			<list>
				<value>com.donwait.model</value>
			</list>
		</property>
	</bean>
	<!-- 配置通用Dao -->
	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate5.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 日志管理 -->
	<bean id="logManager" class="com.p6spy.engine.spy.appender.LogManager"></bean>

	<!-- 配置spring声明式事物 -->
	<!-- 1。配置事务管理器 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate5.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>
	<!-- 2.配置事务属性 ，需要事物管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="find*" read-only="true" />
			<tx:method name="get*" read-only="true" />
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>
	<!-- 3.配置事务切点, 并把切点和事物属性关联起来 -->
	<!-- com.donwait.service包下的所有类的所有方法,参数任意 -->
	<!-- 事务aop -->
	<aop:config proxy-target-class="true">
		<aop:pointcut expression="execution(* com.donwait.service.*.*(..)) || execution(* com.donwait.actionHandler.*.*(..))" id="txPointcut" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut" />
	</aop:config>
	
	<!-- 注解管理事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"  proxy-target-class="true" />
	
	<!-- 初始化区域数据-->
	<import resource="classpath:data_init.xml"/>
	
	<!-- redis配置 -->
	<import resource="classpath:redis.xml"/>
</beans>
