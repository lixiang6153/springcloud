<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.3.xsd">
	
	<!-- 配置自动扫描的包 -->
	<context:component-scan base-package="com.easystudy">
		<!-- 控制器 -->
		<context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
		<!-- 异常处理 -->
		<context:include-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
	</context:component-scan>

	<!-- 配置视图解析器：如何把handler方法返回值解析为实际物理视图，默认优先级int.maxValue-->
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
	
	<!-- 配置视图解析器：这里自定义视图解析使用 ,作用：使用视图的名字来解析视图（从spring容器中获取，
	所以视图必须用spring注解标注如componet）
	通过order设置视图解析器优先级，数字越大，解析器优先级越小，一般最常用的放最后，默认优先级为Int.maxValue
	-->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="100"></property>
	</bean>
	
	<!-- 资源国际化文件配置[注册资源国际化实例] -->
	<bean id="messageSource"
		class="org.springframework.context.support.ResourceBundleMessageSource">
		<property name="basename" value="i18n"></property>
	</bean>
	
	<!-- 配置资源直接转发页面，不通过handler 
	http://localhost:9000/springMVC/success 路径,但回退后链接点击会导致404问题,跳转的页面相对于视图解析的prefix（这里配置的view目录）
	所以需要配置mvc:annotation-driven标签-->
	<mvc:view-controller path="/success" view-name="success"/>
	
	<!-- 配置默认的servlet处理器，如果不是静态资源请求，才有DispatcherServlet处理，否则应该交给默认的
	servlet处理进行处理，默认的WEB应用服务器的servlet名字都是default，如果不是则由default-servlet-name
	进行明文指定，这个也会导致静态资源返回后请求动态资源又会失效（问题同页面直接转发mvc:view-controller） -->
	<mvc:default-servlet-handler default-servlet-name="default"/>
	
	<!-- 实际开发环境中通常都需配置mvc:annotation-driven 标签：
	mvc:annotation-driven会自动注册3个bean：
	RequestMappingHanlderMapping、
	RequestMappingHandlerAdapter、
	ExceptionHandlerExceptionResolver，同时还提供如下支持：
	1、支持使用ConversionService对表单数据进行数据类型转换
	2、支持使用@NumberFormannotation、@DateTimeFormat注解完成数据类型的格式化
	3、支持使用@Valid注解完成对JavaBean实例进行JSR303验证
	4、支持使用@RequestBody和@ReponseBody注解-->
	<mvc:annotation-driven conversion-service="conversionService"></mvc:annotation-driven>
	
	<!-- 配置自定义转换器，配置完成后必须注入到mvc:annotation-driven中-->
	<bean id="conversionService" 
		  class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		  <!-- class="org.springframework.context.support.ConversionServiceFactoryBean">-->
		<property name="converters">
			<set>
				<!-- 学生转换器，默认类型第一个字母小写 -->
				<ref bean="studentConversion"/>
			</set>
		</property>
	</bean>
	
	<!-- 页面跳转相对于views视图解析的prefix配置 -->
	<mvc:view-controller path="/i18n" view-name="i18n"/>
	<mvc:view-controller path="/i18n2" view-name="i18n2"/>
	
	<!-- 通过超链接切换本地语言，默认的LocalResolver是AcceptHeaderLocalResolver，手动更改为SessionLocaleResolver-->
	<!-- 配置SessionLocaleResolver用于将Locale对象存储于Session中供后续使用，id值必须为localeResolver否则，仍然会报标题中的错误-->  
	<bean id="localeResolver" class="org.springframework.web.servlet.i18n.SessionLocaleResolver"></bean>  

	<!-- 配置LocaleChangeInterceptor拦截器拦截name=locale参数的语言切换，需要配置拦截器LocalResolverInterceptor通过获取请求参数name=locale将Locale对象刚设置到Session中这里切为SessionLocaleResolver -->
	<mvc:interceptors>
		<bean class="org.springframework.web.servlet.i18n.LocaleChangeInterceptor"></bean>
		<!-- 自定义拦截器 -->
		<bean class="com.easystudy.interceptor.FirstInterceptor"></bean>
		<!-- 配置拦截器作用路径 -->
		<mvc:interceptor>
			<!-- 只作用于/test路径,如果为不作用于，则用exclude-mapping -->
			<mvc:mapping path="/test"/>
			<bean class="com.easystudy.interceptor.SecondInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>
	
	<!-- 配置文件上传MultipartResolver -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="maxUploadSize" value="1024000"></property>
	</bean>
	
	<!-- 关于进行Spring整合SpringMVC吗？
		是否进行加入Spring的IOC容器？
		是否需要在web.xml配置Spring的ContextLoaderListener
		
		1、需要：通常情况下。类似于数据源、事物、整合其他框架都是放在Spring的配置文件中（而不是放在SpringMVC的配置文件中）
		实际上放入Spring配置文件中的IOC容器中的还有Service的Dao
		2、不需要：都放在SpringMVC的配置文件中，也可以分多个Spring的配置文件，然后import节点导入其他配置文件
		或配置文件使用通配符
		<import resource=""/>
		
		注意：整个的时候，扫描到的包会被两个容器都创建一次，导致扫描到的bean被创建两次，解决：
		1、使得Spring的IOC扫描的包与SpringMVC的IOC容器扫描的包没有重合的部分
		2、 使用context:component-scan子节点context:exclude-filter或context:include-filter
		但是问题来了：
		SpringMVC的IOC容器中的Bean可以应用Spring的IOC中的Bean，但是反过来则不行！
		原因：SpringMVC是Spring配置文件的子容器，所以SpirngMVC可以依赖Spring，反之则不行
	 -->
	 
</beans>
